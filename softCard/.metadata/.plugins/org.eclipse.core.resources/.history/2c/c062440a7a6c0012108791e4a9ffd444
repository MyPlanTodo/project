package Default;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import java.net.InetAddress;
import java.net.UnknownHostException;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.SSLSocket;



public class SoftCard {

	static SSLServerSocket servSocket;
	private InetAddress adresse = null;
	static Thread_Client tc = null;
	
	public SoftCard(String adr, int port, int maxConn) {
		
		try {
			byte[] addr = adr.getBytes();
			adresse = InetAddress.getByAddress(addr);
		} catch (UnknownHostException e) {
			System.out.println("Adresse non valide");
			e.printStackTrace();
			System.exit(1);
		}
		
		System.setProperty("javax.net.ssl.keyStore", "/home/administrateur/faceCrypt/certTest/server.jks");
		System.setProperty("javax.net.ssl.keyStorePassword", "lolilol");
		
//		String ks = System.getProperty("javax.net.ssl.keyStore");
//		String pw = System.getProperty("javax.net.ssl.keyStorePassword");
//		System.out.println(System.getProperty("javax.net.ssl.keyStore"));
//		if(ks == null)
//			System.out.println("KeyStore not found.");
//		if(pw == null)
//			System.out.println("Password failure.");
		
		SSLServerSocketFactory sslSrvFact = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
		try {
			servSocket = (SSLServerSocket) sslSrvFact.createServerSocket(port, maxConn, adresse);
			servSocket =(SSLServerSocket)sslSrvFact.createServerSocket(4242);
			this.listening();
		} catch (IOException e) {
			System.out.println("Problème Socket");
			e.printStackTrace();
			System.exit(2);
		}
		
	}
	
	public void listening() {
		SSLSocket sock = null;
		
		System.out.println("En attente de clients !");
		while (true) {  	
			try {
				sock = (SSLSocket) servSocket.accept();
				tc = new Thread_Client(sock);
			} catch (IOException e) {
				System.out.println("Problème Ecoute Socket");
				e.printStackTrace();
				System.exit(3);
			}
		}
	}
	
	public void sendMessage(String s) {
		tc.sendMessage(s);
	}
	
	public void receiveMessage() {
		tc.receiveMessage();
	}
	
	public void free() {
		try {
			tc.free();
		} catch (IOException e) {
			System.out.println("Problème free()");
		}
	}
	
}	
	
	
class Thread_Client implements Runnable {

	private SSLSocket socket = null;
	private BufferedReader in = null;
	private PrintWriter out = null;
	
	private String mess = "";
	Thread t = null;

	public Thread_Client(SSLSocket s) throws IOException {
		
			socket = s;
			in = new BufferedReader (new InputStreamReader(socket.getInputStream()));
			out = new PrintWriter(socket.getOutputStream());
			t = new Thread(this);
			t.start();
	}

	public void run() {
		System.out.println("Client connecté");
	}
	
	public void receiveMessage() {
		while(!mess.contains("quit")){
			try {
				mess = in.readLine();
				System.out.println(mess);
			} catch (IOException e) {
				System.out.println("Problème reception message");
				e.printStackTrace();
			}
			
			if (mess.equals("quit")) {
				sendMessage("Fin de connexion");
			}	
		}
	}
	
	public void sendMessage(String s) {
		out.println(s);
		out.flush();
	}
	
	public void free () throws IOException {
		in.close();
		out.close();
		socket.close();
		System.exit(0);
	}
}
