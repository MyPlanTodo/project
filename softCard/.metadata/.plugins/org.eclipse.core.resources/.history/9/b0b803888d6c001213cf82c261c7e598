package Default;

public class cipher {

	static sendPublicKey(){
		// Récupération de l'exposant
		r = channel.transmit(new CommandAPDU((byte) CLA_CIPHER, INS_GET_EXPONENT, (byte)0x00, (byte)0x00, 1));

		if (r.getSW() != 0x9000) {
			System.out.println("Err: " + r.getSW1() + " " + r.getSW2());
		} else {
			byte[] data = r.getData();
			exp = new BigInteger(1, data);
			System.out.println(exp.toString());
		}

		// Récupération du modulus
		r = channel.transmit(new CommandAPDU((byte) CLA_CIPHER, INS_GET_MODULUS, (byte)0x00, (byte)0x00, 1));

		if (r.getSW() != 0x9000) {
			System.out.println("Err: " + r.getSW1() + " " + r.getSW2());
		} else {
			BigInteger mod = new BigInteger(1, r.getData());

			KeyFactory kf = KeyFactory.getInstance("RSA");
			RSAPublicKeySpec pubKeySpec = new RSAPublicKeySpec(mod, exp);
			publicKey = kf.generatePublic(pubKeySpec);
			System.out.println(publicKey.toString());

		}
		Cipher c = Cipher.getInstance("RSA");
		byte[] clearText = new String("hello world").getBytes();
		c.init(Cipher.ENCRYPT_MODE, publicKey);
		byte[] ciphered = c.doFinal(clearText);
	}
}
